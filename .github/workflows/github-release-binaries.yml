on:
  # pull_request:
  push:
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  # Explore-GitHub-Actions:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo "🎉 ou? The job was automatically triggered by a ${{ github.event_name }} event."
  #     - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
  #     - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
  #     - name: Check out repository code
  #       uses: actions/checkout@v2
  #     - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
  #     - run: echo "🖥️ The workflow is now ready to test your code on the runner."
  #     - name: List files in the repository
  #       run: |
  #         ls ${{ github.workspace }}
  #     - run: echo "🍏 This job's status is ${{ job.status }}."

  build_binaries:
    runs-on: ${{ matrix.os }}
    env:
      # Dump backtrace on panic
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        # build: [linux, linux-arm, macos, win-msvc, win-gnu, win32-msvc]
        build: [linux, macos]
        include:
        - build: linux
          os: ubuntu-18.04
          rust: nightly
          target: x86_64-unknown-linux-musl
        # - build: linux-arm
        #   os: ubuntu-18.04
        #   rust: nightly
        #   target: arm-unknown-linux-gnueabihf
        - build: macos
          os: macos-latest
          rust: nightly
          target: x86_64-apple-darwin
        # - build: win-msvc
        #   os: windows-2019
        #   rust: nightly
        #   target: x86_64-pc-windows-msvc
        # - build: win-gnu
        #   os: windows-2019
        #   rust: nightly-x86_64-gnu
        #   target: x86_64-pc-windows-gnu
        # - build: win32-msvc
        #   os: windows-2019
        #   rust: nightly
        #   target: i686-pc-windows-msvc
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}
    - name: Install and configure cross
      shell: bash
      run: |
        ### skip for now ### cargo install cross
        ## instead.....
        echo "CARGO=cargo" >> $GITHUB_ENV
        ### skip for now ### echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV
    - name: Check configurations for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"
    - name: Build release binary (DUMMY)
      # run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}
      run: |
        mkdir -p ${{ env.TARGET_DIR }}/release
        echo "hi this is on ${{ matrix.target }}" > ${{ env.TARGET_DIR }}/release/tergrrs
    - name: Check results
      shell: bash
      run: |
        echo "TARGET_DIR is: $TARGET_DIR"
        ls -l $TARGET_DIR
        ls -l ./
        ls -l ./target/
        ls -l ./target/*
        ls -l ./target/**/*
    - name: Retrieve version and change the binary name
      shell: bash
      run: |
        # to use the envvar in this step
        BINARY_VERSION=${GITHUB_REF#refs/tags/}
        # to use the envvar in subsequent steps
        echo "BINARY_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        # to use the binary version in another job (that needs this job) via uploading the text file as an artifact
        echo $BINARY_VERSION > BINARY_VERSION.txt

        echo "BINARY_VERSION from github workflow env dot: ${{ env.BINARY_VERSION }}"
        echo "BINARY_VERSION from bash env var: $BINARY_VERSION"
        mv ${{ env.TARGET_DIR }}/release/tergrrs \
           ./tergrrs-${BINARY_VERSION}-${{ matrix.target }}
    - name: Check results 2 - result of mv command
      shell: bash
      run: |
        ls -l
        echo "BINARY_VERSION from github workflow env dot: ${{ env.BINARY_VERSION }}"
        echo "BINARY_VERSION from bash env var: $BINARY_VERSION"
    - name: Store the binary version as an artifact
      uses: actions/upload-artifact@v2
      with:
        name: binary-version
        if-no-files-found: error
        path: BINARY_VERSION.txt
    - name: Store the built binary as an artifact
      uses: actions/upload-artifact@v2
      with:
        name: tergrrs-binaries
        if-no-files-found: error
        path: ./tergrrs-${{ env.BINARY_VERSION }}-${{ matrix.target }}

  create_github_release:
    runs-on: ubuntu-latest
    needs: [build_binaries]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Check workspace before download
      shell: bash
      run: |
        env
        ls -l
    - name: Download stored artifacts (binaries) on GitHub artifacts
      uses: actions/download-artifact@v2
      with:
        name: tergrrs-binaries
    - name: Download the version number to release on GitHub artifacts
      uses: actions/download-artifact@v2
      with:
        name: binary-version
    - name: Check downloaded binaries and matrix
      shell: bash
      run: |
        ls -l
        echo "${{ needs }}"
        echo "${{ needs.build_binaries }}"
        echo "${{ needs.build_binaries.matrix }}"
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith( github.ref, 'refs/tags/v' )
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          tergrrs-*
