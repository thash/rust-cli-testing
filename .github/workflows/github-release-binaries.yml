on:
  # TODO: "invoke only when the commit is created through version up PR" ... check latest commit message?
  # pull_request:
  #   branches:
  #   - main
  push:
    # direct push to the main branch should be protected by a rule. Expecting PR is made to change main, including release.
    # https://docs.github.com/en/github/administering-a-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule
    branches:
    - main
  #   # tags:
  #   # - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  check_if_release_pull_request:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - uses: actions/github-script@v3
      # see details /docs https://github.com/actions/github-script
      id: myscript
      with:
        github-token: ${{ github.token }}
        debug: true
        script: |
          // "context" https://github.com/actions/toolkit/blob/main/packages/github/src/context.ts
          console.log(context.eventName);
          console.log(context.ref);
          console.log(context.sha);
          console.log(context.payload.commits);
          console.log("---------duuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuump---------")
          console.log(context);
          return context.payload.commits[0].message

    - name: Check if the (latest) commit is release version up commit
      shell: bash
      run: |
        echo "${{ steps.myscript.outputs.result }}"
        echo $?
        # if [[ ${{ steps.myscript.outputs.result }} =~ [workflow] Bump version to v =  ]]; then
        [[ ${{ steps.myscript.outputs.result }} =~ workflow ]]
        echo $?
        if [[ ${{ steps.myscript.outputs.result }} =~ workflow ]]; then
          echo "commit message match"
        else
          exit 1
        fi
        exit 0

  build_binaries:
    runs-on: ${{ matrix.os }}
    needs: [check_if_release_pull_request]
    env:
      # Dump backtrace on panic
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        # build: [linux, linux-arm, macos, win-msvc, win-gnu, win32-msvc]
        build: [linux]
        include:
        - build: linux
          os: ubuntu-18.04
          rust: nightly
          target: x86_64-unknown-linux-musl
        # - build: linux-arm
        #   os: ubuntu-18.04
        #   rust: nightly
        #   target: arm-unknown-linux-gnueabihf
        # - build: macos
        #   os: macos-latest
        #   rust: nightly
        #   target: x86_64-apple-darwin
        # - build: win-msvc
        #   os: windows-2019
        #   rust: nightly
        #   target: x86_64-pc-windows-msvc
        # - build: win-gnu
        #   os: windows-2019
        #   rust: nightly-x86_64-gnu
        #   target: x86_64-pc-windows-gnu
        # - build: win32-msvc
        #   os: windows-2019
        #   rust: nightly
        #   target: i686-pc-windows-msvc
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}
    - name: Install and configure cross
      shell: bash
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV
    - name: Check configurations for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"
    - name: Build release binary
      run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}
    - name: Retrieve CLI_VERSION from Cargo.toml
      id: retrieve_cli_version
      shell: bash
      run: |
        CLI_VERSION=$(grep "version =" Cargo.toml | sed -e 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/g')
        echo "CLI_VERSION retrieved from Cargo.toml is: ${CLI_VERSION}"
        # set for subsequent steps
        echo "CLI_VERSION=${CLI_VERSION}" >> $GITHUB_ENV
        # set for subsequent jobs
        echo "::set-output name=cli_version::${CLI_VERSION}"
    - name: Append CLI_VERSION and build target to the binary name
      shell: bash
      run: |
        mv ${{ env.TARGET_DIR }}/release/tergrrs \
           ${{ env.TARGET_DIR }}/release/tergrrs-v${{ env.CLI_VERSION }}-${{ matrix.target }}
    - name: Check target/${{ matrix.target }}/release/
      shell: bash
      run: |
        ls -l $TARGET_DIR/release/
    - name: Store the built binary as an artifact
      uses: actions/upload-artifact@v2
      with:
        name: cli-binaries
        if-no-files-found: error
        path: ${{ env.TARGET_DIR }}/release/tergrrs-v${{ env.CLI_VERSION }}-*
    outputs:
      cli_version: ${{ steps.retrieve_cli_version.outputs.cli_version }}

  # create_release_tag:
  #   runs-on: ubuntu-latest
  #   needs: [build_binaries]
  #   if: ${{ needs.build_binaries.outputs.cli_version != '' }}
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
  #   - name: Create release version tag
  #     uses: actions/github-script@v3
  #     with:
  #       github-token: ${{ github.token }}
  #       script: |
  #         github.git.createRef({
  #           owner: context.repo.owner,
  #           repo: context.repo.repo,
  #           ref: "refs/tags/v${{ needs.build_binaries.outputs.cli_version }}",
  #           sha: context.sha
  #         })

  create_github_release:
    runs-on: ubuntu-latest
    # needs: [build_binaries, create_release_tag]
    needs: [build_binaries]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Download stored artifacts (binaries) on GitHub artifacts
      uses: actions/download-artifact@v2
      with:
        name: cli-binaries
    - name: Check downloaded binaries and matrix
      shell: bash
      run: |
        ls -l
    - name: Release
      uses: softprops/action-gh-release@v1
      # if: startsWith( github.ref, 'refs/tags/v' )
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.build_binaries.outputs.cli_version }}
        body: |
          Changes ... this should be filled automatically
        files: |
          tergrrs-v${{ needs.build_binaries.outputs.cli_version }}-*