on:
  pull_request:
  push:
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  build_binaries:
    runs-on: ${{ matrix.os }}
    env:
      # Dump backtrace on panic
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux, linux-arm, macos, win-msvc, win-gnu, win32-msvc]
        include:
        - build: linux
          os: ubuntu-18.04
          rust: nightly
          target: x86_64-unknown-linux-musl
        - build: linux-arm
          os: ubuntu-18.04
          rust: nightly
          target: arm-unknown-linux-gnueabihf
        - build: macos
          os: macos-latest
          rust: nightly
          target: x86_64-apple-darwin
        - build: win-msvc
          os: windows-2019
          rust: nightly
          target: x86_64-pc-windows-msvc
        - build: win-gnu
          os: windows-2019
          rust: nightly-x86_64-gnu
          target: x86_64-pc-windows-gnu
        - build: win32-msvc
          os: windows-2019
          rust: nightly
          target: i686-pc-windows-msvc
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}
    - name: Install and configure cross
      shell: bash
      run: |
        cargo install cross
        echo "CARGO=cross" >> $GITHUB_ENV
        echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
        echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV
    - name: Check configurations for Cargo
      run: |
        echo "cargo command is: ${{ env.CARGO }}"
        echo "target flag is: ${{ env.TARGET_FLAGS }}"
        echo "target dir is: ${{ env.TARGET_DIR }}"
    - name: Build release binary
      run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}
    - name: Retrieve version and change the binary name
      shell: bash
      run: |
        # to use the envvar in this step
        BINARY_VERSION=${GITHUB_REF#refs/tags/}
        # to use the envvar in subsequent steps
        echo "BINARY_VERSION=${BINARY_VERSION}" >> $GITHUB_ENV
        echo "BINARY_VERSION from github workflow env dot: ${{ env.BINARY_VERSION }}"
        echo "BINARY_VERSION from bash env var: ${BINARY_VERSION}"
        mv ${{ env.TARGET_DIR }}/release/tergrrs \
           ${{ env.TARGET_DIR }}/release/tergrrs-${BINARY_VERSION}-${{ matrix.target }}
    - name: Check target/${{ matrix.target }}/release/
      shell: bash
      run: |
        echo "BINARY_VERSION from github workflow env dot: ${{ env.BINARY_VERSION }}"
        echo "BINARY_VERSION from bash env var: $BINARY_VERSION"
        ls -l $TARGET_DIR/release/
    - name: Store the built binary as an artifact
      uses: actions/upload-artifact@v2
      with:
        name: tergrrs-binaries
        if-no-files-found: error
        path: ${{ env.TARGET_DIR }}/release/tergrrs-*

  create_github_release:
    runs-on: ubuntu-latest
    needs: [build_binaries]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Download stored artifacts (binaries) on GitHub artifacts
      uses: actions/download-artifact@v2
      with:
        name: tergrrs-binaries
    - name: Check downloaded binaries and matrix
      shell: bash
      run: |
        ls -l
    - name: Release
      uses: softprops/action-gh-release@v1
      if: startsWith( github.ref, 'refs/tags/v' )
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          tergrrs-*
